using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Neurotoxin.Roentgen.Models;

namespace Neurotoxin.Roentgen.Visitors
{
    public class SourceFileVisitor : VisitorBase<IEnumerable<ICodePart>>
    {
        private SemanticModel _model;
        private bool _isGenerated;

        public ICodePart Discover(SyntaxTree tree, Compilation compilation)
        {
            Reset();
            _model = compilation.GetSemanticModel(tree);
            _isGenerated = tree.ToString().Contains("<auto-generated>"); //TODO: regex?
            return new SourceFile
            {
                FullName = tree.FilePath,
                Model = _model,
                IsGenerated = _isGenerated,
                Children = Visit(tree.GetRoot()).ToList()
            };
        }

        private IEnumerable<ICodePart> Visit(ClassDeclarationSyntax node)
        {
            var cls = SyntaxCodePart.Create<Class>(node, _model);
            cls.Children = node.ChildNodes().SelectMany(Visit).Where(c => c != null).ToList();
            yield return cls;
        }

        private IEnumerable<ICodePart> Visit(MethodDeclarationSyntax node)
        {
            var method = SyntaxCodePart.Create<Method>(node, _model);
            method.Declaration = node;
            yield return method;
        }

        private IEnumerable<ICodePart> Visit(PropertyDeclarationSyntax node)
        {
            //TODO: temporary removal
            if (node.ExplicitInterfaceSpecifier != null) yield return null;

            yield return SyntaxCodePart.Create<Property>(node, _model);
        }

        private IEnumerable<ICodePart> Visit(InterfaceDeclarationSyntax node)
        {
            yield break;
        }

        private IEnumerable<ICodePart> Visit(StructDeclarationSyntax node)
        {
            yield break;
        }

        protected override IEnumerable<ICodePart> ContinueWith(SyntaxNode node)
        {
            return node.ChildNodes().SelectMany(Visit);
        }

    }
}